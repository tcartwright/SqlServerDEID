<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddionalNameSpaces" xml:space="preserve">
    <value>Additional namespaces can be imported to provide access to additional classes or 
functions in the C# expressions or the PowerShell scripts.

These namespaces will be brought in by default:

- Bogus
- Bogus.DataSets
- System
- System.Text
- System.Text.RegularExpressions</value>
  </data>
  <data name="columns.count.column" xml:space="preserve">
    <value>The number of columns in this table.</value>
  </data>
  <data name="Credentials" xml:space="preserve">
    <value>A generic credential must be created in the Credential Manager to be available in this dropdown.

Use "Trusted Connection" to connect as the currently logged on user.</value>
  </data>
  <data name="datatype.column" xml:space="preserve">
    <value>The sql server datatype of the table column.</value>
  </data>
  <data name="disableconstraints.column" xml:space="preserve">
    <value>If enabled all constraints that are enabled will be disabled before running any DEID transforms against the table. All previouly disabled constraints will be re-enabled afterwards.</value>
  </data>
  <data name="disabletriggers.column" xml:space="preserve">
    <value>If enabled all triggers will be disabled before running any DEID transforms against the table. All triggers will be re-enabled afterwards.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ExampleScript" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ExampleScript.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="GetTableNames" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\GetTableNames.sql;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="GetTransformData" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\GetTransformData.sql;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="iscomputed.column" xml:space="preserve">
    <value>True if the table column is a computed column. Transforms cannot be applied if true.</value>
  </data>
  <data name="isidentity.column" xml:space="preserve">
    <value>True if this table column is an identity column. Transforms cannot be applied if true.</value>
  </data>
  <data name="ispk.column" xml:space="preserve">
    <value>True if this table column is part of the tables primary key. Transforms cannot be applied if true.</value>
  </data>
  <data name="isselected.column" xml:space="preserve">
    <value>This column determines whether or not the column will appear in the transform document, and also be available in the RowValues object. 

Columns with transforms will automatically be selected, and cannot be unselected.

A column can be selected without transforms, which will add it to the overall transform query and make the value also available in the RowValues object.</value>
  </data>
  <data name="Locale" xml:space="preserve">
    <value>The locale to use when generating faker data.</value>
  </data>
  <data name="name.column" xml:space="preserve">
    <value>The name of the database object.</value>
  </data>
  <data name="PortNumber" xml:space="preserve">
    <value>The port to connect to SQL Server on. 0 and 1433 are synonymous.</value>
  </data>
  <data name="PostScript" xml:space="preserve">
    <value>This sql script will be run after all table transforms are run. A fully qualified or relative path can be used. 

All relative paths will be relative to the transform configuration file.</value>
  </data>
  <data name="PreScript" xml:space="preserve">
    <value>This sql script will be run before all table transforms are run. A fully qualified or relative path can be used. 

All relative paths will be relative to the transform configuration file.</value>
  </data>
  <data name="Scriptimeout" xml:space="preserve">
    <value>Gets the wait time (in seconds) before terminating the attempt to execute the PreScript or PostScript and generating an error.</value>
  </data>
  <data name="ScriptTemplate" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ScriptTemplate.txt;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="testtransform.column" xml:space="preserve">
    <value>Allows for testing of the transforms without making any actual table changes. All changes are tested against a global temp table.</value>
  </data>
  <data name="transform.column" xml:space="preserve">
    <value>The transform can either be a C# expression or a path to a powershell file. If pointing to a powershell file path, then make the path relative to where the transform file will be saved, or use an absolute path.</value>
  </data>
  <data name="transforms.count.column" xml:space="preserve">
    <value>The number of Faker transforms applied to this table column.</value>
  </data>
  <data name="transformtype.column" xml:space="preserve">
    <value>Determines whether or not a C# expression will be used, or a powershell file.</value>
  </data>
  <data name="whereclause.column" xml:space="preserve">
    <value>The where clause is data expression SQL where clause without the WHERE statement. If there are multiple transforms for a single column then the WHERE clause is required for each one.</value>
  </data>
</root>